"""
Алгоритм заключается в выборе вершин по одной и присваивании им 
минимального доступного цвета, который еще не назначен соседним вершинам. 

нам понадобятся:
1. граф - словарь с вершинам и смежными вершинами.

2. Список цветов 

3. Функция проверки на присвоение цвета

4. Алгоритм назначения цветов вершинам по одной.
"""

graph = {
    'A': ['B', 'C'],
    'B': ['A', 'C', 'D'],
    'C': ['A', 'B', 'D', 'E'],
    'D': ['B', 'C', 'E', 'F'],
    'E': ['C', 'D'],
    'F': ['D']
}

# количество цветов
num_colors = 3

# список цветов
vertex_colors = {}


# Функция проверки на присвоение цвета
def is_color_valid(vertex, color):
    # проходим по списку смежных вершин
    for neighbor in graph[vertex]:
        # если соседняя вершина уже имеет такой цвет, результат ложный
        if vertex_colors.get(neighbor) == color:
            return False
    # если все соседи имеют разные цвета, результат истинный
    return True


# жадный алгоритм раскраски графа
for vertex in graph:
    # проходим по всем цветам и пытаемся найти минимальный доступный цвет
    for color in range(num_colors):
        if is_color_valid(vertex, color):
            vertex_colors[vertex] = color
            break

# выводим итоговую раскраску вершин графа
for vertex, color in vertex_colors.items():
    print(f"{vertex}: {color}")
